@page "/rRoles"
@page "/rRoles/{parametro:int}"
@using TechTrendsAppv1.BLL.RolesServices
@using TechTrendsAppv1.Modelos
@inject IRolesService rolesService
@inject IToastService toast
@rendermode InteractiveServer

<EditForm Model="rol" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h3>Registro de Roles</h3>
        </div>
        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col" style="margin-bottom:2rem;">
                        <div class="form-group">
                            <label>Rol Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="rol.IdRol" class="form-control col-4" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label>Nombre del rol</label>
                    <InputText @bind-Value="rol.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => rol.Nombre)" />
                </div>
                <div class="card mt-4" >

                    <div class="form-group d-inline-flex">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr class="table-info">
                                    <th>Permiso</th>
                                    <th>Activo</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in rol.Permisos)
                                {
                                    <tr>
                                        <td>@item.Permiso.Descripcion</td>
                                        <td><input type="checkbox" class="form-check" @bind-value="@item.Activo" /></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button @onclick="Nuevo" type="button" class="btn btn-lg btn-primary">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger">Eliminar</button>
            </div>

        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int parametro { get; set; }
    public Roles rol { get; set; } = new Roles();
    public List<PermisosRoles> permisos { get; set; } = new List<PermisosRoles>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        permisos = await rolesService.GetPermisosRoles();
        if(parametro > 0)
        {
            await Buscar(parametro);
        }
        else
        {
            await Nuevo();
        }

    }

    private async Task Nuevo()
    {
        rol = new Roles();
        rol.Permisos = permisos;
    }

    private async void Guardar()
    {
        var guardado = await rolesService.Guardar(rol);

        if (guardado)
        {
            await Nuevo();
            toast.ShowInfo("El rol se guardo correctamente");
        }
        else
        {
            toast.ShowWarning("El rol no se guardo");
        }
    }

    private async Task Buscar(int id)
    {
        if (id > 0)
        {
            var encontrado = await rolesService.GetRolAsync(id);
            if (encontrado != null)
            {
                this.rol = encontrado;
                if(rol.Permisos.Count == 0)
                {
                    rol.Permisos = permisos;
                }
            }
            else
            {
                await Nuevo();
                toast.ShowWarning($"No se ha encontrado el rol con el id ingresado");
            }
        }
    }

    private async Task LlenarPermisos()
    {
        
    }

    public async Task Eliminar()
    {
        bool eliminado;

        eliminado = await rolesService.Eliminar(rol.IdRol);

        if (eliminado)
        {
            await Nuevo();
            toast.ShowInfo("El rol se elimino correctamente");
        }
        else
        {
            toast.ShowWarning("El rol no se elimino");
        }

    }
}
